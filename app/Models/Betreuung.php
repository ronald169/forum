<?php

namespace App\Models;

use App\Traits\Subscribable;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Str;

class Betreuung extends Model
{

    protected $hidden = ['secret'];

    use Subscribable;

    protected $fillable = ['description', 'title', 'slug', 'secret', 'avatar'];

    protected $appends = ['is_subscribed', 'subscribes_count'];

    protected static function boot()
    {
        parent::boot(); // TODO: Change the autogenerated stub

        static::deleting(function ($betreuung) {
            if ($betreuung->courses->count()) {
                $betreuung->courses->each->delete();
            }
        });

        static::created(function ($klasse) {
            $klasse->update(['slug' => $klasse->title]);
        });
    }

    public function getRouteKeyName()
    {
        return 'slug';
    }

    public function user()
    {
        return $this->belongsTo('App\User');
    }

    public function courses()
    {
        return $this->hasMany('App\Models\Course');
    }

    public function path()
    {
        return "/klasse/$this->slug";
    }

    public function getCoursesCountAttribute()
    {
        return $this->courses->count();
    }

    public function setSlugAttribute($value)
    {
        $slug = Str::slug($value);

        if (static::whereSlug($slug)->exists()) {
            $slug = "{$slug}-". $this->id;
        }

        $this->attributes['slug'] = $slug;
    }

    public function events()
    {
        return $this->hasMany('App\models\Event', 'betreuung_id');
    }

    public function addCourse($data)
    {
        $course = $this->courses()->create($data);

        $this->notifySubscribers($course);

        return $course;
    }

    public function notifySubscribers($course)
    {
        $this->subscribes
            ->where('user_id', '!=', $course->user_id)
            ->each
            ->notifyCourseCreated($course);
    }
}
